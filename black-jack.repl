;; Blackjack Contract REPL File
;; This file provides test scenarios and example usage for the blackjack module

;; Load required modules
(load "kda-env/init.repl")

;; Set up admin keyset data BEFORE defining the keyset
(env-data {
    "ks": {
        "keys": ["admin-key"],
        "pred": "keys-any"
    }
})

;; Set admin signature to ensure keyset authentication works
(env-sigs [{"key": "admin-key", "caps": []}])

(begin-tx "Load module")
(namespace 'free)
(define-keyset "free.blackjack-admin-keyset" (read-keyset "ks"))
(load "black-jack.pact")

(commit-tx)

;; =============================================================================
;; Test Setup
;; =============================================================================

(begin-tx "Setup test accounts and initialize balances")

;; Create test accounts with initial balances (1000.0 each)
(env-data {
    "alice-guard": {
        "keys": ["alice-key"],
        "pred": "keys-any"
    },
    "bob-guard": {
        "keys": ["bob-key"], 
        "pred": "keys-any"
    },
    "dave-guard": {
        "keys": ["dave-key"],
        "pred": "keys-any"
    }
})

;; Set up signatures for account creation
(env-sigs [
    {"key": "alice-key", "caps": []},
    {"key": "bob-key", "caps": []},
    {"key": "dave-key", "caps": []}
])

;; Store account guards for our test accounts
(env-sigs [
    {"key": "alice-key", "caps": []},
    {"key": "bob-key", "caps": []},
    {"key": "dave-key", "caps": []},
    {"key": "carol-key", "caps": []}
])
(free.blackjack.store-account-guard "alice")
(free.blackjack.store-account-guard "bob")
(free.blackjack.store-account-guard "dave")

;; Fund the BJ BANK account 
(env-sigs [{"key": "carol-key", "caps": [(coin.TRANSFER "carol" (free.blackjack.get-BJ_BANK-account) 100.0)]}])
(coin.transfer "carol" (free.blackjack.get-BJ_BANK-account) 100.0)

(commit-tx)

;; =============================================================================
;; Test Contract Initialization
;; =============================================================================

(begin-tx "Test initialization and admin functions")

;; Set admin signature for admin operations
(env-sigs [{"key": "admin-key", "caps": [(free.blackjack.GOVERNANCE)]}])

;; Check initial fees
(expect "PVC fee should be 1.0" 1.0 (free.blackjack.get-fee "pvc"))
(expect "PVP fee should be 2.0" 2.0 (free.blackjack.get-fee "pvp"))
(expect "Tournament fee should be 3.0" 3.0 (free.blackjack.get-fee "tournament"))

;; Test admin fee setting
(free.blackjack.set-game-fee "pvc" 1.5)
(expect "Updated PVC fee should be 1.5" 1.5 (free.blackjack.get-fee "pvc"))

;; Test game modes
(expect "Should return all game modes" 
  ["pvc" "pvp" "tournament"] 
  (free.blackjack.get-game-modes))

;; Check bank account balance
(expect "Bank should be funded with 100.0" 
  100.0 (coin.get-balance (free.blackjack.get-BJ_BANK-account)))

(commit-tx)

;; =============================================================================
;; Test Tournament Creation and Registration
;; =============================================================================

(begin-tx "Test tournament creation and registration")

;; Set a specific block time that falls within our tournament date range
(env-chain-data {
  "block-time": (time "2027-06-15T12:00:00Z"),
  "block-height": 100,
  "gas-limit": 100000,
  "gas-price": 0.0000001,
  "sender": "test-sender"
})

;; Set admin signature for tournament creation
(env-sigs [{"key": "admin-key", "caps": [(free.blackjack.GOVERNANCE)]}])

;; Create a test tournament
(free.blackjack.create-tournament 
  "test-tournament-1"
  50.0
  10
  (time "2024-01-01T00:00:00Z")  ;; signup start
  (time "2028-12-31T23:59:59Z")  ;; signup end
  (time "2024-01-01T00:00:00Z")  ;; tournament start
  (time "2028-12-31T23:59:59Z")  ;; tournament end
)

;; Debug: Check times
(print (format "Current time: {}" [(free.blackjack.curr-time)]))
(let ((tournament (free.blackjack.get-tournament "test-tournament-1")))
  (print (format "Signup start: {}" [(at "startSignup" tournament)]))
  (print (format "Signup end: {}" [(at "endSignup" tournament)]))
)

;; Check tournament details
(let ((tournament (free.blackjack.get-tournament "test-tournament-1")))
  (expect "Tournament ID should match" "test-tournament-1" (at "id" tournament))
  (expect "Tournament pool should be 50.0" 50.0 (at "pool" tournament))
  (expect "Max players should be 10" 10 (at "maxPlayers" tournament))
  (expect "Initial players list should be empty" [] (at "players" tournament)))

;; Test tournament registration
(env-sigs [{"key": "alice-key", "caps": [(free.blackjack.ACCOUNT_GUARD "alice"), (coin.TRANSFER "alice" (free.blackjack.get-BJ_BANK-account) 3.0)]}])
(free.blackjack.register-for-tournament "test-tournament-1" "alice")

;; Check alice was added to tournament
(let ((tournament (free.blackjack.get-tournament "test-tournament-1")))
  (expect "Alice should be registered" ["alice"] (at "players" tournament)))

;; Check alice's balance decreased by tournament fee
(expect "Alice's balance should decrease by tournament fee" 
  997.0 (coin.get-balance "alice"))

(commit-tx)

;; =============================================================================
;; Test Game Joining
;; =============================================================================

(begin-tx "Test joining games")

;; Test PVC game
(env-sigs [{"key": "alice-key", "caps": [(free.blackjack.ACCOUNT_GUARD "alice"), (coin.TRANSFER "alice" (free.blackjack.get-BJ_BANK-account) 1.5)]}])
(free.blackjack.join-game "alice" "pvc" "none")

;; Check alice's stats updated
(let ((stats (free.blackjack.get-player-stats "alice")))
  (expect "Alice should have 1 game played" 1 (at "games-played" stats))
  (expect "Alice should have 0 wins" 0 (at "wins" stats)))

;; Check alice's balance decreased by PVC fee
(expect "Alice's balance should decrease by PVC fee" 
  995.5 (coin.get-balance "alice"))

;; Test PVP game
(env-sigs [{"key": "bob-key", "caps": [(free.blackjack.ACCOUNT_GUARD "bob"), (coin.TRANSFER "bob" (free.blackjack.get-BJ_BANK-account) 2.0)]}])
(free.blackjack.join-game "bob" "pvp" "")

;; Check bob's balance decreased by PVP fee
(expect "Bob's balance should decrease by PVP fee" 
  998.0 (coin.get-balance "bob"))

(commit-tx)

;; =============================================================================
;; Test Recording Wins
;; =============================================================================

(begin-tx "Test recording wins and payouts")

;; Set admin signature for recording wins
(env-sigs [{"key": "admin-key", "caps": [(free.blackjack.GOVERNANCE), (free.blackjack.BANK_TRANSFER)]}])

;; Record a PVP win for bob
(free.blackjack.record-win "bob" "pvp" "")

;; Check bob's stats updated
(let ((stats (free.blackjack.get-player-stats "bob")))
  (expect "Bob should have 1 win" 1 (at "wins" stats)))

;; Check bob received PVP payout (60% of 2 * 2.0 = 2.4)
(expect "Bob should receive PVP payout" 
  1000.4 (coin.get-balance "bob"))

;; Test tournament win
(env-sigs [{"key": "alice-key", "caps": [(free.blackjack.ACCOUNT_GUARD "alice"), (coin.TRANSFER "alice" (free.blackjack.get-BJ_BANK-account) 3.0)]}])
(free.blackjack.join-game "alice" "tournament" "test-tournament-1")

;; Record tournament win for alice
(env-sigs [{"key": "admin-key", "caps": [(free.blackjack.GOVERNANCE), (free.blackjack.BANK_TRANSFER)]}])
(free.blackjack.record-win "alice" "tournament" "test-tournament-1")

;; Check alice received tournament payout (70% of 50.0 = 35.0)
(expect "Alice should receive tournament payout" 
  1030.5 (coin.get-balance "alice"))

(commit-tx)

;; =============================================================================
;; Test Leaderboard
;; =============================================================================

(begin-tx "Test leaderboard functionality")

;; Add more wins for testing leaderboard
(env-sigs [{"key": "admin-key", "caps": [(free.blackjack.GOVERNANCE), (free.blackjack.BANK_TRANSFER)]}])
(free.blackjack.record-win "alice" "pvc" "none")
(free.blackjack.record-win "alice" "pvc" "none")

;; Check leaderboard
(let ((leaderboard (free.blackjack.get-leaderboard)))
  (expect "Leaderboard should not be empty" true (> (length leaderboard) 0))
  (print (format "Leaderboard: {}" [leaderboard])))

(commit-tx)

;; =============================================================================
;; Test Error Conditions
;; =============================================================================

(begin-tx "Test error conditions")

;; Test invalid game mode
(env-sigs [{"key": "alice-key", "caps": [(free.blackjack.ACCOUNT_GUARD "alice")]}])
(expect-failure "Should fail with invalid game mode"
  (free.blackjack.join-game "alice" "invalid-mode" ""))

;; Test unauthorized admin action (should fail without admin keyset)
(env-sigs [{"key": "alice-key", "caps": []}])
(expect-failure "Should fail without admin capability"
  (free.blackjack.set-game-fee "pvc" 10.0))

;; Test joining tournament without registration
(env-sigs [{"key": "dave-key", "caps": [(free.blackjack.ACCOUNT_GUARD "dave")]}])
(expect-failure "Should fail joining unregistered tournament"
  (free.blackjack.join-game "dave" "tournament" "test-tournament-1"))

(commit-tx)

;; =============================================================================
;; Utility Functions for Testing
;; =============================================================================

(begin-tx "Define utility functions")

(print "Print balances for all test accounts:")
(print (format "Alice balance: {}" [(coin.get-balance "alice")]))
(print (format "Bob balance: {}" [(coin.get-balance "bob")]))
(print (format "Charlie balance: {}" [(coin.get-balance "dave")]))
(print (format "Bank balance: {}" [(coin.get-balance (free.blackjack.get-BJ_BANK-account))]))


(print "Print stats for all test accounts")
(print (format "Alice stats: {}" [(free.blackjack.get-player-stats "alice")]))
(print (format "Bob stats: {}" [(free.blackjack.get-player-stats "bob")]))
(print (format "Charlie stats: {}" [(free.blackjack.get-player-stats "dave")]))


(print "Print tournament information")
(print (format "Tournament {}: {}" ["test-tournament-1" (free.blackjack.get-tournament "test-tournament-1")]))

(commit-tx)

;; =============================================================================
;; Additional Test Scenarios
;; =============================================================================

(begin-tx "Additional test scenarios")

(commit-tx)

(print "Blackjack REPL tests completed!")